<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
</head>

<body>
  <div id="main">
    <div id="mainContent">
      <div class="forFlow">
        <div id="post_detail">
          <div id="topics">
            <div class="post">
              <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle"
                  href="https://www.cnblogs.com/onepixel/p/7674659.html">
                  <span>十大经典排序算法（动图演示）</span>
                </a>
              </h1>
              <div class="clear"></div>
              <div class="postBody">

                <div id="cnblogs_post_body" class="blogpost-body">
                  <h3 id="排序算法说明">0、算法概述</h3>
                  <h4>0.1 算法分类<strong><br></strong></h4>
                  <p>十种常见排序算法可以分为两大类：</p>
                  <ul>
                    <li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li>
                    <li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。&nbsp;</li>
                  </ul>
                  <p><img src="https://img2018.cnblogs.com/blog/849589/201903/849589-20190306165258970-1789860540.png"
                      alt="" width="655" height="521"></p>
                  <h4><span style="font-size: 1em">0.2 算法复杂度</span></h4>
                  <p><img
                      src="https://images2018.cnblogs.com/blog/849589/201804/849589-20180402133438219-1946132192.png"
                      alt="" width="655" height="443"></p>
                  <p><strong>0.3 相关概念</strong></p>
                  <ul>
                    <li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li>
                    <li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li>
                    <li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li>
                    <li><strong>空间复杂度：</strong>是指算法在计算机</li>
                  </ul>
                  <p>内执行时所需存储空间的度量，它也是数据规模n的函数。&nbsp;</p>
                  <h3 id="1冒泡排序bubble-sort">1、冒泡排序（Bubble Sort）</h3>
                  <p>
                    冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&nbsp;
                  </p>
                  <h4 id="2算法描述和实现">1.1 算法描述</h4>
                  <ul>
                    <li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
                    <li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
                    <li>针对所有的元素重复以上的步骤，除了最后一个；</li>
                    <li>重复步骤1~3，直到排序完成。</li>
                  </ul>
                  <p><strong>1.2 动图演示</strong></p>
                  <p><img
                      src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif"
                      alt="" width="681" height="212"></p>
                  <h4 id="2算法描述和实现">1.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_31041" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      bubbleSort(arr) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">len =
                                      arr.length;</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = 0; i &lt; len -
                                      1; i++) {</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = 0; j &lt; len - 1
                                      - i; j++) {</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(arr[j] &gt; arr[j+1])
                                      {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code
                                      class="csharp comments">// 相邻元素两两对比</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">temp =
                                      arr[j+1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code
                                      class="csharp comments">// 元素交换</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[j+1] = arr[j];</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[j] = temp;</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number13 index12 alt2"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h3 id="2选择排序selection-sort">2、选择排序（Selection Sort）</h3>
                  <p>
                    选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&nbsp;
                  </p>
                  <h4 id="2算法描述和实现-1">2.1 算法描述</h4>
                  <p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
                  <ul>
                    <li>初始状态：无序区为R[1..n]，有序区为空；</li>
                    <li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录
                      R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
                    <li>n-1趟结束，数组有序化了。</li>
                  </ul>
                  <h4 id="2算法描述和实现"><strong>2.2 动图演示</strong></h4>
                  <p><img
                      src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015224719590-1433219824.gif"
                      alt="" width="684" height="209">　　</p>
                  <h4 id="2算法描述和实现">2.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_703212" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      selectionSort(arr) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">len =
                                      arr.length;</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">minIndex,
                                      temp;</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = 0; i &lt; len -
                                      1; i++) {</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">minIndex = i;</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = i + 1; j &lt;
                                      len; j++) {</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(arr[j] &lt;
                                      arr[minIndex]) {&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">//
                                      寻找最小的数</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">minIndex =
                                      j;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    </code><code class="csharp comments">// 将最小数的索引保存</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">temp = arr[i];</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[i] = arr[minIndex];</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[minIndex] = temp;</code></div>
                                  <div class="line number14 index13 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number16 index15 alt1"><code class="csharp plain">}&nbsp;</code>
                                  </div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4>2.4 算法分析</h4>
                  <p>
                    表现最稳定的排序算法之一，因为无论什么数据进去都是O(n<sup>2</sup>)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。
                  </p>
                  <h3 id="3插入排序insertion-sort">3、插入排序（Insertion Sort）</h3>
                  <p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
                  <h4>3.1 算法描述</h4>
                  <p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
                  <ul>
                    <li>从第一个元素开始，该元素可以认为已经被排序；</li>
                    <li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
                    <li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
                    <li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
                    <li>将新元素插入到该位置后；</li>
                    <li>重复步骤2~5。</li>
                  </ul>
                  <h4>3.2 动图演示</h4>
                  <p><img
                      src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif"
                      alt="" width="671" height="418"></p>
                  <h4>3.2 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_391383" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      insertionSort(arr) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">len =
                                      arr.length;</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">preIndex,
                                      current;</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = 1; i &lt; len;
                                      i++) {</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">preIndex = i - 1;</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">current = arr[i];</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code> <code class="csharp plain">(preIndex &gt;= 0
                                      &amp;&amp; arr[preIndex] &gt; current) {</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[preIndex + 1] = arr[preIndex];</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">preIndex--;</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[preIndex + 1] = current;</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number14 index13 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4>3.4 算法分析</h4>
                  <p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
                  <h3 id="4希尔排序shell-sort">4、希尔排序（Shell Sort）</h3>
                  <p>
                    1959年Shell发明，第一个突破O(n<sup>2</sup>)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。
                  </p>
                  <h4><span style="font-size: 1em">4.1 算法描述</span></h4>
                  <p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
                  <ul>
                    <li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
                    <li>按增量序列个数k，对序列进行k 趟排序；</li>
                    <li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
                  </ul>
                  <h4>4.2 动图演示</h4>
                  <p><img src="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif"
                      alt=""></p>
                  <h4>4.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_250189" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp comments">// 修改于
                                      2019-03-06</code></div>
                                  <div class="line number2 index1 alt1"><code class="csharp plain">function
                                      shellSort(arr) {</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">len =
                                      arr.length;</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">gap = Math.floor(len
                                      / 2); gap &gt; 0; gap = Math.floor(gap / 2)) {</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp comments">// 注意：这里和动图演示的不一样，动图是分组执行，实际操作是多个分组交替执行</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = gap; i &lt; len;
                                      i++) {</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = i;</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">current =
                                      arr[i];</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code> <code class="csharp plain">(j - gap &gt;= 0
                                      &amp;&amp; current &lt; arr[j - gap]) {</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[j] = arr[j - gap];</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">j = j - gap; </code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[j] = current;</code></div>
                                  <div class="line number14 index13 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number16 index15 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number17 index16 alt2"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4>4.4 算法分析</h4>
                  <p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。　</p>
                  <h3 id="5归并排序merge-sort">5、归并排序（Merge Sort）</h3>
                  <p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and
                    Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。&nbsp;</p>
                  <h4>5.1 算法描述</h4>
                  <ul>
                    <li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
                    <li>对这两个子序列分别采用归并排序；</li>
                    <li>将两个排序好的子序列合并成一个最终的排序序列。</li>
                  </ul>
                  <h4>5.2 动图演示</h4>
                  <p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230557043-37375010.gif"
                      alt="" width="678" height="422"></p>
                  <h4>5.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_925067" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                                <div class="line number18 index17 alt1">18</div>
                                <div class="line number19 index18 alt2">19</div>
                                <div class="line number20 index19 alt1">20</div>
                                <div class="line number21 index20 alt2">21</div>
                                <div class="line number22 index21 alt1">22</div>
                                <div class="line number23 index22 alt2">23</div>
                                <div class="line number24 index23 alt1">24</div>
                                <div class="line number25 index24 alt2">25</div>
                                <div class="line number26 index25 alt1">26</div>
                                <div class="line number27 index26 alt2">27</div>
                                <div class="line number28 index27 alt1">28</div>
                                <div class="line number29 index28 alt2">29</div>
                                <div class="line number30 index29 alt1">30</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      mergeSort(arr) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">len =
                                      arr.length;</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(len &lt; 2) {</code>
                                  </div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">middle =
                                      Math.floor(len / 2),</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">left = arr.slice(0, middle),</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">right = arr.slice(middle);</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code
                                      class="csharp plain">merge(mergeSort(left), mergeSort(right));</code></div>
                                  <div class="line number10 index9 alt1"><code class="csharp plain">}</code></div>
                                  <div class="line number11 index10 alt2">&nbsp;</div>
                                  <div class="line number12 index11 alt1"><code class="csharp plain">function
                                      merge(left, right) {</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">result = [];</code>
                                  </div>
                                  <div class="line number14 index13 alt1">&nbsp;</div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code> <code class="csharp plain">(left.length&gt;0
                                      &amp;&amp; right.length&gt;0) {</code></div>
                                  <div class="line number16 index15 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(left[0] &lt;=
                                      right[0]) {</code></div>
                                  <div class="line number17 index16 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">result.push(left.shift());</code></div>
                                  <div class="line number18 index17 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">} </code><code class="csharp keyword">else</code> <code
                                      class="csharp plain">{</code></div>
                                  <div class="line number19 index18 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">result.push(right.shift());</code></div>
                                  <div class="line number20 index19 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number21 index20 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number22 index21 alt1">&nbsp;</div>
                                  <div class="line number23 index22 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code> <code
                                      class="csharp plain">(left.length)</code></div>
                                  <div class="line number24 index23 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">result.push(left.shift());</code></div>
                                  <div class="line number25 index24 alt2">&nbsp;</div>
                                  <div class="line number26 index25 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code> <code
                                      class="csharp plain">(right.length)</code></div>
                                  <div class="line number27 index26 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">result.push(right.shift());</code></div>
                                  <div class="line number28 index27 alt1">&nbsp;</div>
                                  <div class="line number29 index28 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">result;</code>
                                  </div>
                                  <div class="line number30 index29 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4>5.4 算法分析</h4>
                  <p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p>
                  <h3 id="6快速排序quick-sort">6、快速排序（Quick Sort）</h3>
                  <p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
                  <h4 id="2算法描述和实现-5">6.1 算法描述</h4>
                  <p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
                  <ul>
                    <li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
                    <li>
                      重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；
                    </li>
                    <li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
                  </ul>
                  <h4>6.2 动图演示</h4>
                  <p><img
                      src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230936371-1413523412.gif"
                      alt="" width="682" height="212"></p>
                  <h4>6.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_3904" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                                <div class="line number18 index17 alt1">18</div>
                                <div class="line number19 index18 alt2">19</div>
                                <div class="line number20 index19 alt1">20</div>
                                <div class="line number21 index20 alt2">21</div>
                                <div class="line number22 index21 alt1">22</div>
                                <div class="line number23 index22 alt2">23</div>
                                <div class="line number24 index23 alt1">24</div>
                                <div class="line number25 index24 alt2">25</div>
                                <div class="line number26 index25 alt1">26</div>
                                <div class="line number27 index26 alt2">27</div>
                                <div class="line number28 index27 alt1">28</div>
                                <div class="line number29 index28 alt2">29</div>
                                <div class="line number30 index29 alt1">30</div>
                                <div class="line number31 index30 alt2">31</div>
                                <div class="line number32 index31 alt1">32</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      quickSort(arr, left, right) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">len =
                                      arr.length,</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">partitionIndex,</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">left = </code><code class="csharp keyword">typeof</code>
                                    <code class="csharp plain">left != </code><code
                                      class="csharp string">'number'</code> <code class="csharp plain">? 0 :
                                      left,</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">right = </code><code class="csharp keyword">typeof</code>
                                    <code class="csharp plain">right != </code><code
                                      class="csharp string">'number'</code> <code class="csharp plain">? len - 1 :
                                      right;</code></div>
                                  <div class="line number6 index5 alt1">&nbsp;</div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(left &lt; right)
                                      {</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">partitionIndex = partition(arr, left, right);</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">quickSort(arr, left, partitionIndex-1);</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">quickSort(arr, partitionIndex+1, right);</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number13 index12 alt2"><code class="csharp plain">}</code></div>
                                  <div class="line number14 index13 alt1">&nbsp;</div>
                                  <div class="line number15 index14 alt2"><code class="csharp plain">function
                                      partition(arr, left ,right) {&nbsp;&nbsp;&nbsp;&nbsp; </code><code
                                      class="csharp comments">// 分区操作</code></div>
                                  <div class="line number16 index15 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">pivot =
                                      left,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    </code><code class="csharp comments">// 设定基准值（pivot）</code></div>
                                  <div class="line number17 index16 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">index = pivot + 1;</code></div>
                                  <div class="line number18 index17 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = index; i &lt;=
                                      right; i++) {</code></div>
                                  <div class="line number19 index18 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(arr[i] &lt;
                                      arr[pivot]) {</code></div>
                                  <div class="line number20 index19 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">swap(arr, i, index);</code></div>
                                  <div class="line number21 index20 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">index++;</code></div>
                                  <div class="line number22 index21 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div>
                                  <div class="line number23 index22 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number24 index23 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">swap(arr, pivot, index - 1);</code></div>
                                  <div class="line number25 index24 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">index-1;</code>
                                  </div>
                                  <div class="line number26 index25 alt1"><code class="csharp plain">}</code></div>
                                  <div class="line number27 index26 alt2">&nbsp;</div>
                                  <div class="line number28 index27 alt1"><code class="csharp plain">function swap(arr,
                                      i, j) {</code></div>
                                  <div class="line number29 index28 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">temp = arr[i];</code>
                                  </div>
                                  <div class="line number30 index29 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[i] = arr[j];</code></div>
                                  <div class="line number31 index30 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[j] = temp;</code></div>
                                  <div class="line number32 index31 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h3 id="7堆排序heap-sort">7、堆排序（Heap Sort）</h3>
                  <p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
                  <h4>7.1 算法描述</h4>
                  <ul>
                    <li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
                    <li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
                    <li>
                      由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。
                    </li>
                  </ul>
                  <h4>7.2 动图演示</h4>
                  <p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015231308699-356134237.gif"
                      alt=""></p>
                  <h4>7.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_120289" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                                <div class="line number18 index17 alt1">18</div>
                                <div class="line number19 index18 alt2">19</div>
                                <div class="line number20 index19 alt1">20</div>
                                <div class="line number21 index20 alt2">21</div>
                                <div class="line number22 index21 alt1">22</div>
                                <div class="line number23 index22 alt2">23</div>
                                <div class="line number24 index23 alt1">24</div>
                                <div class="line number25 index24 alt2">25</div>
                                <div class="line number26 index25 alt1">26</div>
                                <div class="line number27 index26 alt2">27</div>
                                <div class="line number28 index27 alt1">28</div>
                                <div class="line number29 index28 alt2">29</div>
                                <div class="line number30 index29 alt1">30</div>
                                <div class="line number31 index30 alt2">31</div>
                                <div class="line number32 index31 alt1">32</div>
                                <div class="line number33 index32 alt2">33</div>
                                <div class="line number34 index33 alt1">34</div>
                                <div class="line number35 index34 alt2">35</div>
                                <div class="line number36 index35 alt1">36</div>
                                <div class="line number37 index36 alt2">37</div>
                                <div class="line number38 index37 alt1">38</div>
                                <div class="line number39 index38 alt2">39</div>
                                <div class="line number40 index39 alt1">40</div>
                                <div class="line number41 index40 alt2">41</div>
                                <div class="line number42 index41 alt1">42</div>
                                <div class="line number43 index42 alt2">43</div>
                                <div class="line number44 index43 alt1">44</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp keyword">var</code> <code
                                      class="csharp plain">len;&nbsp;&nbsp;&nbsp; </code><code
                                      class="csharp comments">// 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</code></div>
                                  <div class="line number2 index1 alt1">&nbsp;</div>
                                  <div class="line number3 index2 alt2"><code class="csharp plain">function
                                      buildMaxHeap(arr) {&nbsp;&nbsp; </code><code class="csharp comments">//
                                      建立大顶堆</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">len = arr.length;</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i =
                                      Math.floor(len/2); i &gt;= 0; i--) {</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">heapify(arr, i);</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number8 index7 alt1"><code class="csharp plain">}</code></div>
                                  <div class="line number9 index8 alt2">&nbsp;</div>
                                  <div class="line number10 index9 alt1"><code class="csharp plain">function
                                      heapify(arr, i) {&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">//
                                      堆调整</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">left = 2 * i +
                                      1,</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">right = 2 * i + 2,</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">largest = i;</code></div>
                                  <div class="line number14 index13 alt1">&nbsp;</div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(left &lt; len
                                      &amp;&amp; arr[left] &gt; arr[largest]) {</code></div>
                                  <div class="line number16 index15 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">largest = left;</code></div>
                                  <div class="line number17 index16 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number18 index17 alt1">&nbsp;</div>
                                  <div class="line number19 index18 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(right &lt; len
                                      &amp;&amp; arr[right] &gt; arr[largest]) {</code></div>
                                  <div class="line number20 index19 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">largest = right;</code></div>
                                  <div class="line number21 index20 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number22 index21 alt1">&nbsp;</div>
                                  <div class="line number23 index22 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(largest != i)
                                      {</code></div>
                                  <div class="line number24 index23 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">swap(arr, i, largest);</code></div>
                                  <div class="line number25 index24 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">heapify(arr, largest);</code></div>
                                  <div class="line number26 index25 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number27 index26 alt2"><code class="csharp plain">}</code></div>
                                  <div class="line number28 index27 alt1">&nbsp;</div>
                                  <div class="line number29 index28 alt2"><code class="csharp plain">function swap(arr,
                                      i, j) {</code></div>
                                  <div class="line number30 index29 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">temp = arr[i];</code>
                                  </div>
                                  <div class="line number31 index30 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[i] = arr[j];</code></div>
                                  <div class="line number32 index31 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[j] = temp;</code></div>
                                  <div class="line number33 index32 alt2"><code class="csharp plain">}</code></div>
                                  <div class="line number34 index33 alt1">&nbsp;</div>
                                  <div class="line number35 index34 alt2"><code class="csharp plain">function
                                      heapSort(arr) {</code></div>
                                  <div class="line number36 index35 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">buildMaxHeap(arr);</code></div>
                                  <div class="line number37 index36 alt2">&nbsp;</div>
                                  <div class="line number38 index37 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = arr.length - 1; i
                                      &gt; 0; i--) {</code></div>
                                  <div class="line number39 index38 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">swap(arr, 0, i);</code></div>
                                  <div class="line number40 index39 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">len--;</code></div>
                                  <div class="line number41 index40 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">heapify(arr, 0);</code></div>
                                  <div class="line number42 index41 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number43 index42 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number44 index43 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h3 id="8计数排序counting-sort">8、计数排序（Counting Sort）</h3>
                  <p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
                  <h4 id="3算法分析-5">8.1 算法描述</h4>
                  <ul>
                    <li>找出待排序的数组中最大和最小的元素；</li>
                    <li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
                    <li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
                    <li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li>
                  </ul>
                  <h4 id="3算法分析-5">8.2 动图演示</h4>
                  <p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015231740840-6968181.gif"
                      alt="" width="690" height="380"></p>
                  <h4 id="3算法分析-5">8.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_474337" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                                <div class="line number18 index17 alt1">18</div>
                                <div class="line number19 index18 alt2">19</div>
                                <div class="line number20 index19 alt1">20</div>
                                <div class="line number21 index20 alt2">21</div>
                                <div class="line number22 index21 alt1">22</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      countingSort(arr, maxValue) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">bucket = </code><code
                                      class="csharp keyword">new</code> <code class="csharp plain">Array(maxValue +
                                      1),</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">sortedIndex = 0;</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arrLen = arr.length,</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">bucketLen = maxValue + 1;</code></div>
                                  <div class="line number6 index5 alt1">&nbsp;</div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = 0; i &lt; arrLen;
                                      i++) {</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(!bucket[arr[i]])
                                      {</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">bucket[arr[i]] = 0;</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">bucket[arr[i]]++;</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number13 index12 alt2">&nbsp;</div>
                                  <div class="line number14 index13 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = 0; j &lt;
                                      bucketLen; j++) {</code></div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code><code class="csharp plain">(bucket[j] &gt; 0)
                                      {</code></div>
                                  <div class="line number16 index15 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[sortedIndex++] = j;</code></div>
                                  <div class="line number17 index16 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">bucket[j]--;</code></div>
                                  <div class="line number18 index17 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number19 index18 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number20 index19 alt1">&nbsp;</div>
                                  <div class="line number21 index20 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number22 index21 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4 id="3算法分析-5">8.4 算法分析</h4>
                  <p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k
                    之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p>
                  <h3 id="9桶排序bucket-sort">9、桶排序（Bucket Sort）</h3>
                  <p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket
                    sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p>
                  <h4 id="3算法分析-5">9.1 算法描述</h4>
                  <ul>
                    <li>设置一个定量的数组当作空桶；</li>
                    <li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>
                    <li>对每个不是空的桶进行排序；</li>
                    <li>从不是空的桶里把排好序的数据拼接起来。&nbsp;</li>
                  </ul>
                  <h4>9.2 图片演示</h4>
                  <p><img
                      src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015232107090-1920702011.png"
                      alt=""></p>
                  <h4>9.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_766113" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                                <div class="line number18 index17 alt1">18</div>
                                <div class="line number19 index18 alt2">19</div>
                                <div class="line number20 index19 alt1">20</div>
                                <div class="line number21 index20 alt2">21</div>
                                <div class="line number22 index21 alt1">22</div>
                                <div class="line number23 index22 alt2">23</div>
                                <div class="line number24 index23 alt1">24</div>
                                <div class="line number25 index24 alt2">25</div>
                                <div class="line number26 index25 alt1">26</div>
                                <div class="line number27 index26 alt2">27</div>
                                <div class="line number28 index27 alt1">28</div>
                                <div class="line number29 index28 alt2">29</div>
                                <div class="line number30 index29 alt1">30</div>
                                <div class="line number31 index30 alt2">31</div>
                                <div class="line number32 index31 alt1">32</div>
                                <div class="line number33 index32 alt2">33</div>
                                <div class="line number34 index33 alt1">34</div>
                                <div class="line number35 index34 alt2">35</div>
                                <div class="line number36 index35 alt1">36</div>
                                <div class="line number37 index36 alt2">37</div>
                                <div class="line number38 index37 alt1">38</div>
                                <div class="line number39 index38 alt2">39</div>
                                <div class="line number40 index39 alt1">40</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp plain">function
                                      bucketSort(arr, bucketSize) {</code></div>
                                  <div class="line number2 index1 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(arr.length === 0)
                                      {</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number5 index4 alt2">&nbsp;</div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i;</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">minValue =
                                      arr[0];</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">maxValue =
                                      arr[0];</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(i = 1; i &lt;
                                      arr.length; i++) {</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code> <code class="csharp plain">(arr[i] &lt; minValue)
                                      {</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">minValue =
                                      arr[i];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    </code><code class="csharp comments">// 输入数据的最小值</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">} </code><code class="csharp keyword">else</code> <code
                                      class="csharp keyword">if</code> <code class="csharp plain">(arr[i] &gt; maxValue)
                                      {</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">maxValue =
                                      arr[i];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    </code><code class="csharp comments">// 输入数据的最大值</code></div>
                                  <div class="line number14 index13 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number16 index15 alt1">&nbsp;</div>
                                  <div class="line number17 index16 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp comments">// 桶的初始化</code></div>
                                  <div class="line number18 index17 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">DEFAULT_BUCKET_SIZE =
                                      5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code
                                      class="csharp comments">// 设置桶的默认数量为5</code></div>
                                  <div class="line number19 index18 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;</code></div>
                                  <div class="line number20 index19 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">bucketCount =
                                      Math.floor((maxValue - minValue) / bucketSize) + 1;&nbsp;&nbsp; </code></div>
                                  <div class="line number21 index20 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">buckets =
                                    </code><code class="csharp keyword">new</code> <code
                                      class="csharp plain">Array(bucketCount);</code></div>
                                  <div class="line number22 index21 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(i = 0; i &lt;
                                      buckets.length; i++) {</code></div>
                                  <div class="line number23 index22 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">buckets[i] = [];</code></div>
                                  <div class="line number24 index23 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number25 index24 alt2">&nbsp;</div>
                                  <div class="line number26 index25 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp comments">// 利用映射函数将数据分配到各个桶中</code></div>
                                  <div class="line number27 index26 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(i = 0; i &lt;
                                      arr.length; i++) {</code></div>
                                  <div class="line number28 index27 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">buckets[Math.floor((arr[i] - minValue) /
                                      bucketSize)].push(arr[i]);</code></div>
                                  <div class="line number29 index28 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number30 index29 alt1">&nbsp;</div>
                                  <div class="line number31 index30 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr.length = 0;</code></div>
                                  <div class="line number32 index31 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(i = 0; i &lt;
                                      buckets.length; i++) {</code></div>
                                  <div class="line number33 index32 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">insertionSort(buckets[i]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    </code><code class="csharp comments">// 对每个桶进行排序，这里使用了插入排序</code></div>
                                  <div class="line number34 index33 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = 0; j &lt;
                                      buckets[i].length; j++) {</code></div>
                                  <div class="line number35 index34 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr.push(buckets[i][j]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    </code></div>
                                  <div class="line number36 index35 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number37 index36 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number38 index37 alt1">&nbsp;</div>
                                  <div class="line number39 index38 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number40 index39 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4 id="3算法分析-7">9.4 算法分析</h4>
                  <p>
                    桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。&nbsp;
                  </p>
                  <h3 id="10基数排序radix-sort">10、基数排序（Radix Sort）</h3>
                  <p>
                    基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。
                  </p>
                  <h4 id="2算法描述和实现-9">10.1 算法描述</h4>
                  <ul>
                    <li>取得数组中的最大数，并取得位数；</li>
                    <li>arr为原始数组，从最低位开始取每个位组成radix数组；</li>
                    <li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li>
                  </ul>
                  <h4>10.2 动图演示</h4>
                  <p><img
                      src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015232453668-1397662527.gif"
                      alt="" width="686" height="389">&nbsp;</p>
                  <h4>10.3 代码实现</h4>
                  <div class="cnblogs_Highlighter sh-gutter">
                    <div>
                      <div id="highlighter_557890" class="syntaxhighlighter  csharp">
                        <div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div>
                        <table border="0" cellpadding="0" cellspacing="0">
                          <tbody>
                            <tr>
                              <td class="gutter">
                                <div class="line number1 index0 alt2">1</div>
                                <div class="line number2 index1 alt1">2</div>
                                <div class="line number3 index2 alt2">3</div>
                                <div class="line number4 index3 alt1">4</div>
                                <div class="line number5 index4 alt2">5</div>
                                <div class="line number6 index5 alt1">6</div>
                                <div class="line number7 index6 alt2">7</div>
                                <div class="line number8 index7 alt1">8</div>
                                <div class="line number9 index8 alt2">9</div>
                                <div class="line number10 index9 alt1">10</div>
                                <div class="line number11 index10 alt2">11</div>
                                <div class="line number12 index11 alt1">12</div>
                                <div class="line number13 index12 alt2">13</div>
                                <div class="line number14 index13 alt1">14</div>
                                <div class="line number15 index14 alt2">15</div>
                                <div class="line number16 index15 alt1">16</div>
                                <div class="line number17 index16 alt2">17</div>
                                <div class="line number18 index17 alt1">18</div>
                                <div class="line number19 index18 alt2">19</div>
                                <div class="line number20 index19 alt1">20</div>
                                <div class="line number21 index20 alt2">21</div>
                                <div class="line number22 index21 alt1">22</div>
                                <div class="line number23 index22 alt2">23</div>
                                <div class="line number24 index23 alt1">24</div>
                              </td>
                              <td class="code">
                                <div class="container">
                                  <div class="line number1 index0 alt2"><code class="csharp keyword">var</code> <code
                                      class="csharp plain">counter = [];</code></div>
                                  <div class="line number2 index1 alt1"><code class="csharp plain">function
                                      radixSort(arr, maxDigit) {</code></div>
                                  <div class="line number3 index2 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">mod = 10;</code>
                                  </div>
                                  <div class="line number4 index3 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">dev = 1;</code></div>
                                  <div class="line number5 index4 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code> <code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">i = 0; i &lt;
                                      maxDigit; i++, dev *= 10, mod *= 10) {</code></div>
                                  <div class="line number6 index5 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code><code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = 0; j &lt;
                                      arr.length; j++) {</code></div>
                                  <div class="line number7 index6 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">bucket =
                                      parseInt((arr[j] % mod) / dev);</code></div>
                                  <div class="line number8 index7 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code><code
                                      class="csharp plain">(counter[bucket]==</code><code
                                      class="csharp keyword">null</code><code class="csharp plain">) {</code></div>
                                  <div class="line number9 index8 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">counter[bucket] = [];</code></div>
                                  <div class="line number10 index9 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number11 index10 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">counter[bucket].push(arr[j]);</code></div>
                                  <div class="line number12 index11 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number13 index12 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">pos = 0;</code></div>
                                  <div class="line number14 index13 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">for</code><code class="csharp plain">(</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">j = 0; j &lt;
                                      counter.length; j++) {</code></div>
                                  <div class="line number15 index14 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">var</code> <code class="csharp plain">value = </code><code
                                      class="csharp keyword">null</code><code class="csharp plain">;</code></div>
                                  <div class="line number16 index15 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">if</code><code
                                      class="csharp plain">(counter[j]!=</code><code
                                      class="csharp keyword">null</code><code class="csharp plain">) {</code></div>
                                  <div class="line number17 index16 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">while</code> <code class="csharp plain">((value =
                                      counter[j].shift()) != </code><code class="csharp keyword">null</code><code
                                      class="csharp plain">) {</code></div>
                                  <div class="line number18 index17 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">arr[pos++] = value;</code></div>
                                  <div class="line number19 index18 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number20 index19 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number21 index20 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number22 index21 alt1"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp plain">}</code></div>
                                  <div class="line number23 index22 alt2"><code
                                      class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                      class="csharp keyword">return</code> <code class="csharp plain">arr;</code></div>
                                  <div class="line number24 index23 alt1"><code class="csharp plain">}</code></div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  <h4 id="3算法分析-8">10.4 算法分析</h4>
                  <p>
                    基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n)
                    ，当然d要远远小于n，因此基本上还是线性级别的。</p>
                  <p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p>
                  <p>&nbsp;</p>
                  <p>&nbsp;</p>
                  <p>　　</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>